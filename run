#!/usr/bin/env python3
import sys, subprocess, re, os

def do_install():
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-e", "."])
    return 0

def do_test():
    import re, subprocess, sys, os, pathlib
    os.chdir(pathlib.Path(__file__).parent.resolve())
    cmd = [sys.executable, "-m", "pytest", "tests",
           "--maxfail=1", "--disable-warnings",
           "--cov=acmecli", "--cov-report=term-missing"]
    r = subprocess.run(cmd, text=True, capture_output=True)
    out = (r.stdout or "") + (r.stderr or "")
    collected = re.search(r"collected\s+(\d+)", out)
    passed    = re.search(r"(\d+)\s+passed", out)
    cov       = re.search(r"TOTAL\s+.*?(\d+)%", out)
    x = int(passed.group(1)) if passed else 0
    y = int(collected.group(1)) if collected else 0
    z = int(cov.group(1)) if cov else 0
    print(f"{x}/{y} test cases passed. {z}% line coverage achieved.")
    return 0 if r.returncode == 0 else 1

def do_score(url_file):
    sys.path.insert(0, "src")  # make sure acmecli is importable
    from acmecli.cli import main as cli_main
    return cli_main(['run', url_file])

def main():
    if len(sys.argv) < 2:
        print("Usage: run install|test|score <URL_FILE>")
        sys.exit(1)
    cmd = sys.argv[1]
    if cmd == "install": sys.exit(do_install())
    if cmd == "test":    sys.exit(do_test())
    if cmd == "score":
        if len(sys.argv) < 3: 
            print("Usage: run score <URL_FILE>")
            sys.exit(1)
        sys.exit(do_score(sys.argv[2]))
    print("Unknown command.")
    sys.exit(1)

if __name__ == "__main__":
    main()