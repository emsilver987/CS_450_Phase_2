name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Install & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies (robust)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f run.py ]; then
            echo "[installer] using run.py"
            python -u run.py install
          elif [ -x ./run ]; then
            echo "[installer] using ./run"
            ./run install
          elif [ -f requirements-dev.txt ]; then
            echo "[installer] using requirements-dev.txt"
            python -m pip install -U pip
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            echo "[installer] using requirements.txt"
            python -m pip install -U pip
            pip install -r requirements.txt
          else
            echo "::warning::No installer found; installing minimal test stack"
            python -m pip install -U pip pytest pytest-cov
          fi

      - name: Lint (non-blocking)
        continue-on-error: true
        shell: bash
        run: |
          python -m pip install flake8 || true
          flake8 src/ --max-line-length=100 --ignore=E203,W503 || true

      - name: Start LocalStack (S3 + DynamoDB)
        run: |
          docker run -d --name localstack \
            -p 4566:4566 \
            -e SERVICES="s3,dynamodb" \
            localstack/localstack:latest
          # wait until ready
          for i in {1..40}; do
            if curl -s http://localhost:4566/health | grep -q '"initialized": true'; then
              echo "LocalStack ready"; break
            fi
            sleep 1
          done

      - name: Export AWS env for tests
        run: |
          echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1"          >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=test"                >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=test"            >> $GITHUB_ENV
          echo "ARTIFACTS_BUCKET=pkg-artifacts"        >> $GITHUB_ENV
          echo "DDB_TABLE_PACKAGES=packages"           >> $GITHUB_ENV
          echo "DDB_TABLE_UPLOADS=uploads"             >> $GITHUB_ENV
          echo "DDB_TABLE_USERS=users"                 >> $GITHUB_ENV
          echo "DDB_TABLE_TOKENS=tokens"               >> $GITHUB_ENV
          echo "DDB_TABLE_DOWNLOADS=downloads"         >> $GITHUB_ENV

      - name: Run tests (unit + integration)
        shell: bash
        run: |
          set -o pipefail
          export PYTHONPATH="src:${PYTHONPATH:-}"
          python -m pytest -v --cov=src --cov-report=term-missing --cov-report=xml | tee pytest-output.txt

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            pytest-output.txt
            coverage.xml

  smoke-score:
    name: Smoke score (push to main only)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies (robust)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f run.py ]; then
            python -u run.py install
          elif [ -x ./run ]; then
            ./run install
          elif [ -f requirements.txt ]; then
            python -m pip install -U pip
            pip install -r requirements.txt
          fi

      - name: Score default URLs (non-blocking)
        continue-on-error: true
        env:
          LOG_LEVEL: "1"
        shell: bash
        run: |
          if [ -f urls.txt ]; then
            echo "Scoring urls.txt..."
            if [ -x ./run ]; then
              ./run urls.txt > reports.ndjson || true
            elif [ -f run.py ]; then
              python -u run.py score urls.txt > reports.ndjson || true
            else
              echo "No scoring entrypoint found; creating empty reports.ndjson"
              : > reports.ndjson
            fi
            echo "NDJSON lines: $(wc -l < reports.ndjson)"
          else
            echo "urls.txt not found; creating empty reports.ndjson"
            : > reports.ndjson
          fi

      - name: Upload NDJSON
        uses: actions/upload-artifact@v4
        with:
          name: reports.ndjson
          path: reports.ndjson
